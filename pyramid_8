/////////////////////////////////////////////
/////////////////////////////////////////////
/////////////////////////////////////////////
//ASC17 /////JU∆NIT∆ ∆RIZ∆ ///////////////////
////////BOGOTÁ COLOMBIA ///////////////////
//////////////////JDLAAG@GMAIL.COM/////////////
/////////////////////////////////////////////
/////////////////////////////////////////////
int n;
import processing.sound.*;
//INSERCIÓN DE CÓDIGO DE SONIDO TRIANGULAR
TriOsc tri;

/////////////////////////////////////////////
void setup (){
  size (1440,900, P3D);
  background (0,0,0);
    
/////////////////////////////////////////////  
//NUMBER OF LINES OF PYRAMID
  n = 5 ;
// Create and start the triangle wave oscillator.
  tri = new TriOsc(this);
  tri.play();


}
void addLine() {
  float fact = random(2);
  float y = random(height);
  float x = fact * width;
  float h = fact * 255;
  float th = random(HALF_PI - 0.2, HALF_PI + 0.2);
  float s = n * random(5, 6);
  
  stroke(h, 255, 255);
  
  pushMatrix();
  translate(x, y);
  rotate(th);
  line(0, 0, 0, s);
  popMatrix();
  
}

void draw (){
  background (0);
  
  //TEXT
   textSize (100);
   color (100,150,200);
  text("P",100,100);
  text("Y",100,200);
  text("R",100,300);
  text("A",100,400);
  text("M",100,500);
  text("Y",100,600);
  text("D",100,700);
  text("8",100,800);

  strokeWeight(1);
  stroke(255);
  fill(5);
  
 
colorMode(HSB, 255, 255, 255);
  for (int i = 0; i < 2000; i++) {
    addLine();
  }
   
translate(width/2, height/2, 0);
stroke(255);
rotateX(PI/2);
rotateZ(-PI/6);
fill(255);

// Pyrámides
beginShape();
vertex(-100, -100, -100);
vertex( 100, -100, -100);
vertex(   0,    0,  100);

vertex( 100, -100, -100);
vertex( 100,  100, -100);
vertex(   0,    0,  100);

vertex( 100, 100, -100);
vertex(-100, 100, -100);
vertex(   0,   0,  100);

vertex(-100,  100, -100);
vertex(-100, -100, -100);
vertex(   0,    0,  100);
endShape();

  

beginShape();
vertex(-200, -200, -200);
vertex( 200, -200, -200);
vertex(   0,    0,  200);

vertex( 200, -200, -200);
vertex( 200,  200, -200);
vertex(   0,    0,  200);

vertex( 200, 200, -200);
vertex(-200, 200, -200);
vertex(   0,   0,  200);

vertex(-200,  200, -200);
vertex(-200, -200, -200);
vertex(   0,    0,  200);
endShape();



beginShape();
vertex(-300, -300, -300);
vertex( 300, -300, -300);
vertex(   0,    0,  300);

vertex( 300, -300, -300);
vertex( 300,  300, -300);
vertex(   0,    0,  300);

vertex( 300, 300, -300);
vertex(-300, 300, -300);
vertex(   0,   0,  300);

vertex(-300,  300, -300);
vertex(-300, -300, -300);
vertex(   0,    0,  300);
endShape();

beginShape();
vertex(-400, -400, -400);
vertex( 400, -400, -400);
vertex(   0,    0,  400);

vertex( 400, -400, -400);
vertex( 400,  400, -400);
vertex(   0,    0,  400);

vertex( 400, 400, -400);
vertex(-400, 400, -400);
vertex(   0,   0,  400);

vertex(-400,  400, -400);
vertex(-400, -400, -400);
vertex(   0,    0,  400);
endShape();

beginShape();
vertex(-500, -500, -500);
vertex( 500, -500, -500);
vertex(   0,    0,  500);

vertex( 500, -500, -500);
vertex( 500,  500, -500);
vertex(   0,    0,  500);

vertex( 500, 500, -500);
vertex(-500, 500, -500);
vertex(   0,   0,  500);

vertex(-500,  500, -500);
vertex(-500, -500, -500);
vertex(   0,    0,  500);
endShape();

//fin pirámides

  // ANPLITUD
  float amplitude = map(mouseY, 0, height, 1.0, 0.0);
  tri.amp(amplitude);

  // FRECUENCIA
  float frequency = map(mouseX, 0, width, 80.0, 1000.0);
  tri.freq(frequency);

  // MAPEO DEL MOUSE
  float panning = map(mouseX, 0, width, -1.0, 1.0);
  tri.pan(panning);

}

void keyPressed() {
  switch(keyCode) {
    case 'R':
      setup();
      break;
    case UP:
      n++;
      break;
    case DOWN:
      n--;
      break;
  }

}
